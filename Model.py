# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19WGiQ9yCnEuJELI6LwWhWO0-pfnhtGQY
"""

from google.colab import drive
drive.mount('/content/drive')

"""Installing the necessary packages"""

!pip install tensorflow --quiet
!pip install tensorflow-text --quiet
!pip install tensorflow_hub --quiet
!pip install matplotlib --quiet

import numpy as np
# import seaborn as sns
import pandas
# import matplotlib.pyplot as plt
import tensorflow as tf
import tensorflow_text
import tensorflow_hub as hub
import keras

"""Importing the bert base model for sentence vectorization and the necessary pre-processor for it from tensorflow hub"""

text_preprocessor = hub.KerasLayer("https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3")
encoder = hub.KerasLayer("https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/4")

df = pandas.read_csv('/content/drive/MyDrive/train.csv')

"""droping rows with empty valuse in the columns of DESCRIPTION and BULLET_POINTS"""

df = df.dropna(subset=['DESCRIPTION', 'BULLET_POINTS'])
target = df.pop("PRODUCT_LENGTH")

"""Removing the extra and unecessary characters in "BULLET POINTS"
"""

t = len(df)
df["BULLET_POINTS"] = df["BULLET_POINTS"].str.replace('|', '', regex=True)
df["BULLET_POINTS"] = df["BULLET_POINTS"].str.replace('\[', '', regex=True)
df["BULLET_POINTS"] = df["BULLET_POINTS"].str.replace('\]', '', regex=True)
print(t)

"""constricting the feature set to just three features"""

df = df[["TITLE", "DESCRIPTION","BULLET_POINTS", "PRODUCT_TYPE_ID"]]
df.head()

ds = tf.convert_to_tensor(df["BULLET_POINTS"])

"""Defining the Inputs"""

inputs = {}
for name, column in df.items():
  if type(column.iloc[0]) == str:                                     # checking if the data type is string or numerical
    dtype=tf.string                                                   # if string then set the dtype to tensorflow string
    inputs[name] = tf.keras.Input(shape=(), name=name, dtype=dtype)
  else:
    dtype = tf.int64                                                  # else set dtype to tensorflow 64 bit integer
    inputs[name] = tf.keras.Input(shape=(), name=name, dtype=dtype)

inputs # created a virtual input or like the input configuration

"""Creating a preprocessor"""

preprocessed = []
vocab = sorted(set(df["PRODUCT_TYPE_ID"]))
lookup = tf.keras.layers.IntegerLookup(vocabulary=vocab, output_mode='one_hot')   # creating a one_hot encoding for the feature PRODUCT_TYPE_ID
x = inputs["PRODUCT_TYPE_ID"][:, tf.newaxis]
x = lookup(x)
preprocessed.append(x)
for name in ["BULLET_POINTS", "TITLE", "DESCRIPTION"]:                            # iterating through textual features and converting the text to vectors by passing them through bert
  x = inputs[name]
  x = text_preprocessor(x)
  x = encoder(x)
  preprocessed.append(x["pooled_output"])

preprocessed                                                                      # created a virtual output of the preprocessor

preprocessed_result = tf.concat(preprocessed, axis=-1)                            # mixing all the inputs into a single tensor
preprocessed_result

preprocessor = tf.keras.Model(inputs, preprocessed_result)                        # initializing a preprocessor from the inputs and outputs

tf.keras.utils.plot_model(preprocessor, rankdir="LR", show_shapes=True)

preprocessor(dict(df.iloc[:1]))

"""The Dense Network"""

body = tf.keras.Sequential([
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(4, activation='relu'),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(1, activation='relu')
])

inputs

x = preprocessor(inputs)
x

result = body(x)
result                                                                            # definition of the final output of the model

"""Final Model"""

model = tf.keras.Model(inputs, result)

model.compile(optimizer='adam', loss=tf.keras.losses.MeanSquaredError(), metrics=['accuracy'])

history = model.fit(dict(df), target, epochs=5, batch_size=8)
